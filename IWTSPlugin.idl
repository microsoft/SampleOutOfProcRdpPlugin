import "oaidl.idl";
import "ocidl.idl";
import "d3d11.idl";

interface IWTSPlugin;
interface IWTSListener;
interface IWTSListenerCallback;
interface IWTSVirtualChannelCallback;
interface IWTSVirtualChannelManager;
interface IWTSVirtualChannel;

//
// Use this service GUID to retrieve RDCLIENT_REMOTE_APP_WINDOW_INFO_SERVICE through
// IWTSPluginServiceProvider::GetService
cpp_quote("EXTERN_GUID( RDCLIENT_REMOTE_APP_WINDOW_INFO_SERVICE, 0x10d23864, 0xcfa3, 0x447b, 0x89, 0x9f, 0x3f, 0xcf, 0x69, 0x80, 0x81, 0x2a);")

//
// Use this service GUID to retrieve RDCLIENT_WINDOW_INFO_SERVICE through
// IWTSPluginServiceProvider::GetService
cpp_quote("EXTERN_GUID( RDCLIENT_WINDOW_INFO_SERVICE, 0xa9a17a6b, 0xcdb3, 0x4e81, 0xb5, 0xc8, 0xbd, 0x63, 0x82, 0x2a, 0x8d, 0x6c);")


//
// =========================================================================
//
//  Interface:          IWTSPlugin
//
//  Implementation:     Plugin side (user)
//
//  Description:
//      Root interface implemented by the plugin for receiving notification
//      from the TS client. This is the default interface the COM object
//      should implement.
//
// =========================================================================
//
[
    object,
    uuid(a1230201-1439-4e62-a414-190d0ac3d40e),
]
interface IWTSPlugin : IUnknown
{
    /*
     *  Called immediately after instantiating the COM class
     */
    HRESULT
        Initialize(
            [in] IWTSVirtualChannelManager* pChannelMgr
        );

    /*
     *  Called when the TS client is connected to the TS server
     */
    HRESULT
        Connected();

    /*
     *  Called when the TS client is disconnected to the TS server
     *  Might be followed by another Connected() call
     */
    HRESULT
        Disconnected(
            DWORD dwDisconnectCode
        );

    /*
     *  The last method called by the TS client before
     *  terminating the object
     */
    HRESULT
        Terminated();
};


//
// =========================================================================
//
//  Interface:          IWTSListener
//
//  Implementation:     Client side (system)
//
//  Description:
//      With this interface the plugin can acquire configuration data for
//  for a listener. It is returned by 
//  IWTSVirtualChannelManager::CreateListener
//
// =========================================================================
//
[
    object,
    uuid(a1230206-9a39-4d58-8674-cdb4dff4e73b),
]
interface IWTSListener : IUnknown
{
    HRESULT
        GetConfiguration(
            [out] IPropertyBag** ppPropertyBag
        );
};


//
// =========================================================================
//
//  Interface:          IWTSListenerCallback
//
//  Implementation:     Plugin side (user)
//
//  Description:
//      With this interface the plugin will receive notifications for
//      Incomming connected channels. Implemented by the client side
//      Set in IWTSVirtualChannelManager::CreateListener() method.
//
// =========================================================================
//
[
    object,
    uuid(a1230203-d6a7-11d8-b9fd-000bdbd1f198),
]
interface IWTSListenerCallback : IUnknown
{
    /*
     *  Called whenever a request for new channel connection
     *  from the server is received.
     */
    HRESULT
        OnNewChannelConnection(
            [in]            IWTSVirtualChannel* pChannel,
            [in, ptr]        BSTR                data,           // optional data passed as part of the connect method
            [out]           BOOL* pbAccept,      // the callee should return TRUE if connection is accepted
            [out]           IWTSVirtualChannelCallback** ppCallback
            // connection related events
        );
};


//
// =========================================================================
//
//  Interface:          IWTSVirtualChannelCallback
//
//  Implementation:     Plugin side (user)
//
//  Description:
//      This interface receives data and close notifications for a specific
//      channel. Implemented by the plugin. Set in 
//      IWTSLisneterCallback::OnNewChannelConnection() method
//
// =========================================================================
//
[
    object,
    uuid(a1230204-d6a7-11d8-b9fd-000bdbd1f198),
]
interface IWTSVirtualChannelCallback : IUnknown
{
    /*
     *  Called whenever a full message from the server is received
     *  The message is fully reassembled and has the exact size
     *  as the Write() call on the server
     */
    HRESULT
        OnDataReceived(
            [in]            ULONG               cbSize,             // size of data in bytes
            [in, size_is(cbSize)] BYTE* pBuffer            // data buffer
        );

    /*
     *  The channel is disconnected, all Write() calls will fail
     *  no more incomming data is expected.
     */
    HRESULT
        OnClose();
};


//
// =========================================================================
//
//  Interface:          IWTSVirtualChannelManager
//
//  Implementation:     Client side (system)
//
//  Description:
//      This interface is used by the plugin as a class factory for
//      listener objects. Implemented by the client, supplied in
//      IWTSPlugin::Initialize() method.
//
// =========================================================================
//
[
    object,
    uuid(a1230205-d6a7-11d8-b9fd-000bdbd1f198),
]
interface IWTSVirtualChannelManager : IUnknown
{
    /*
     *  The plugin requests to create a listener object
     *  with specific name
     */
    HRESULT
        CreateListener(
            [in, string]    const char* pszChannelName,
            [in]            ULONG               uFlags,             // TS_VC_LISTENER_STATIC_XXX flags
            [in]            IWTSListenerCallback* pListenerCallback,
            [out]           IWTSListener** ppListener        // optional
        );
};


//
// =========================================================================
//
//  Interface:          IWTSVirtualChannel
//
//  Implementation:     Client side (system)
//
//  Description:
//      This interface is used by the plugin to send data and closing specific
//      channel. Implemented by the TS client side. 
//      Supplied in IWTSLisneterCallback::OnNewChannelConnection()
//
// =========================================================================
//
[
    object,
    uuid(a1230207-d6a7-11d8-b9fd-000bdbd1f198),
]
interface IWTSVirtualChannel : IUnknown
{
    /*
     *  The plugin requests to send data with specific size
     */
    HRESULT Write(
        [in]            ULONG               cbSize,
        [in, size_is(cbSize)] BYTE* pBuffer,
        [in]            IUnknown* pReserved          // must be NULL
    );

    /*
     *  The plugin requests to close the channel
     *  This will result in TSVirtualChannelCallback::OnClose() call.
     *  All I/O will cease.
     */
    HRESULT
        Close();

};


//
// =========================================================================
//
//  Interface:          IWTSPluginServiceProvider
//
//  Implementation:     Client Side (System)
//
//  Description:
//      The plugin service provider providers a way for Dynamic Virtual Channel
//      plugins to query various Remote Desktop Client services. Plugins can
//      query for the service provider interface from IWTSVirtualChannelManager
//      object passed in during IWTSPlugin::Initialize call
//
// =========================================================================
//
[
    object,
    uuid(D3E07363-087C-476C-86A7-DBB15F46DDB4),
]
interface IWTSPluginServiceProvider : IUnknown
{
    /*
     *  ServiceId - GUID for the service being requested
     *  ppunkObject - Returned Service Object
     */
    [helpstring("GetService")]
    HRESULT
        GetService(
            [in]    GUID      ServiceId,
            [out]   IUnknown** ppunkObject
        );
};


//
// =========================================================================
//
//  Interface:          IWTSBitmapRenderer
//
//  Implementation:     Client Side (System)
//
//  Description:
//       This interface is returned to the dynamic virtual channel plugins once
//       a mapping has been successfully created using IWTSBitmapRenderService. 
//       The plugin can use this interface to render the bitmaps at the location
//       associated with the mapping. The mapping must to removed using 
//       IWTSBitmapRenderer::RemoveMapping once the plugin has completed
//       rendering to it to avoid a mispainted visual element.
//       
// =========================================================================
//
typedef struct __BITMAP_RENDERER_STATISTICS
{
    DWORD dwFramesDelivered;
    DWORD dwFramesDropped;
} BITMAP_RENDERER_STATISTICS, * PBITMAP_RENDERER_STATISTICS;

[
    object,
    uuid(5B7ACC97-F3C9-46F7-8C5B-FA685D3441B1),
]
interface IWTSBitmapRenderer : IUnknown
{
    HRESULT
        Render(
            [in]  GUID   imageFormat,
            [in]  DWORD  dwWidth,
            [in]  DWORD  dwHeight,
            [in]  LONG   cbStride,
            [in]  DWORD  cbImageBuffer,
            [in, size_is(cbImageBuffer)]  BYTE* pImageBuffer
        );

    HRESULT
        GetRendererStatistics(
            [out] BITMAP_RENDERER_STATISTICS* pStatistics
        );

    HRESULT
        RemoveMapping();
};


//
// =========================================================================
//
//  Interface:          IWTSBitmapRendererCallback
//
//  Implementation:     Client Side (Plugin)
//
//  Description:
//       A dynamic virtual channel plugin using the IWTSBitmapRenderService
//       can provide this callback interface to get notified of the render
//       target size change. The image passed in IWTSBitmapRenderer::Render
//       must conform to this size. The Remote Desktop Client doesn't perform
//       any stretching operations on the passed in image. 
//
// =========================================================================
//
[
    object,
    uuid(D782928E-FE4E-4E77-AE90-9CD0B3E3B353),
]
interface IWTSBitmapRendererCallback : IUnknown
{
    HRESULT
        OnTargetSizeChanged(
            [in]    RECT    rcNewSize
        );
};


//
// =========================================================================
//
//  Interface:          IWTSBitmapRenderService
//
//  Implementation:     Client Side (System)
//
//  Description:
//       A dynamic virtual channel can use this service to create a visual 
//       mapping on the client corresponding to a mapped window on the server
//       (using WTSSetRenderHint). The returned IWTSBitmapRenderer can be used
//       to pass the bitmaps to render on the target and the IWTSBitmapRendererCallback
//       interface can be used to get notified of the changes to size of the 
//       render target
//
// =========================================================================
//
[
    object,
    uuid(EA326091-05FE-40C1-B49C-3D2EF4626A0E),
]
interface IWTSBitmapRenderService : IUnknown
{
    HRESULT
        GetMappedRenderer(
            [in]    UINT64 mappingId,
            [in]    IWTSBitmapRendererCallback* pMappedRendererCallback,
            [out]   IWTSBitmapRenderer** ppMappedRenderer
        );
};


declare_guid(CLSID_SamplePluginProxyStub, A9FA1CF7-3024-433B-86A7-950621770265);
[
    object,
    uuid(C0C62619-3BC1-4095-9B9A-84503E37DAA5),
]
interface IWTSPluginFactory : IUnknown
{
    HRESULT GetPluginCount([out, retval] long* count);
    HRESULT CreatePlugin([in] long index, [out, retval] IWTSPlugin** plugin);
};


//
// =========================================================================
//
//  Interface:          IWTSRemoteAppWindowInfoService
//
//  Implementation:     Client Side (System)
//
//  Description:
//      This service provides a way for Dynamic Virtual Channel plugins 
//      to query information about the RDP session window of a Remote App
//
// =========================================================================
//
[
    object,
    uuid(3869F11A-DE41-427F-8028-2D15D2EC9498)
]
interface IWTSRemoteAppWindowInfoService : IUnknown
{
    [helpstring("GetLocalHwnd")]
        HRESULT GetLocalHwnd(
            [in] unsigned int remoteWindowId,
            [out, retval] HWND* localHwnd
        );
};

typedef enum RdpSessionType
{
    Desktop = 0,
    RemoteApp = 1,
} RdpSessionType;

typedef struct WTSWindowInfo
{
    HWND Hwnd;
    int Height;
    int Width;
    int ViewWidth;
    int ViewHeight;
    int ViewOffsetX;
    int ViewOffsetY;
    float Scale;
} WTSWindowInfo;


//
// =========================================================================
//
//  Interface:          IWTSWindowChangedCallback
//
//  Implementation:     Client Side (System)
//
//  Description:
//      This interface provides a way for Dynamic Virtual Channel plugins 
//      to provide a callback when the RDP session window changes.
//
// =========================================================================
[
    object,
    uuid(E8A47FD3-1AF6-4D7F-8E15-515CCAE1C00C)
]
interface IWTSWindowChangedCallback : IUnknown
{
    [helpstring("WindowChanged")]
        HRESULT WindowChanged(
            [in] const WTSWindowInfo* windowInfo
        );
};


//
// =========================================================================
//
//  Interface:          IWTSWindowInfoService
//
//  Implementation:     Client Side (System)
//
//  Description:
//      This service provides a way for Dynamic Virtual Channel plugins 
//      to query information about the RDP session window.
//
// =========================================================================
[
    object,
    uuid(2A002C7B-0120-4D04-BFB1-3C73110C8581)
]
interface IWTSWindowInfoService : IUnknown
{
    [helpstring("GetWindowInfo")]
        HRESULT GetWindowInfo(
            [in] HWND remoteHwnd,
            [out] WTSWindowInfo* windowInfo
        );

    [helpstring("GetRdpClientProcessId")]
        HRESULT GetRdpClientProcessId(
            [out, retval] unsigned long* processId
        );

    [helpstring("GetRdpSessionType")]
        HRESULT GetRdpSessionType(
            [out, retval] RdpSessionType* sessionType
        );

    [helpstring("SubscribeWindowChanged")]
        HRESULT SubscribeWindowChanged(
            [in] HWND remoteHwnd,
            [in] IWTSWindowChangedCallback* windowChanged
        );

    [helpstring("UnsubscribeWindowChanged")]
        HRESULT UnsubscribeWindowChanged(
            [in] HWND remoteHwnd,
            [in] IWTSWindowChangedCallback* windowChanged
        );
};